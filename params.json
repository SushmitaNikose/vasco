{"name":"Vasco","tagline":"An inter-procedural data flow analysis framework using value-based context-sensitivity ","body":"**VASCO** is a framework for performing precise inter-procedural data flow analysis using VAlue Sensitive COntexts.\r\n\r\nThe framework classes are present in the package `vasco` and are described in the paper: *Link to PDF will be added soon.*\r\n\r\nYou can use these classes directly with any program analysis toolkit or intermediate representation, although they work best with [Soot](http://www.sable.mcgill.ca/soot) and it's *Jimple* representation.\r\n\r\n## Points-to Analysis ##\r\n\r\nA sample use of this framework can be found in the package `vasco.callgraph` which contains a points-to analysis that builds a context-sensitive call graph on-the-fly.\r\n\r\n### Usage ###\r\n\r\nTo test this implementation ensure that Soot is in your class path and run:\r\n\r\n<code>\r\njava vasco.callgraph.Test [-cp CLASSPATH] [-out DIR] [-k DEPTH] MAIN_CLASS\r\n</code>\r\n\r\nWhere:\r\n\r\n- `CLASSPATH` is used to locate application classes of the program to analyze (default: `.`)\r\n- `DIR` is the output directory where results will be dumped (default: `.`)\r\n- `DEPTH` is the maximum depth of call chains to count (default: `10`)\r\n- `MAIN_CLASS` is the entry point to the program\r\n\r\n## Pending Tasks ##\r\n\r\n### Points-to analysis: ###\r\n\r\n- Construct Soot-friendly results for the constructed call-graph (`soot.jimple.toolkits.callgraph.CallGraph` and `soot.jimple.toolkits.callgraph.ContextSensitiveCallGraph`).\r\n- Handle Thread.start() calls to support multi-threaded programs.\r\n\r\n### Inter-procedural framework: ###\r\n\r\n- Improve performance using multi-threaded processing of flow functions.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}